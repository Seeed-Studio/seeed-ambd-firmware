/*
 * Generated by erpcgen 1.7.4 on Fri Feb 26 16:04:25 2021.
 *
 * AUTOGENERATED - DO NOT EDIT
 */


#include "erpc_client_manager.h"
#include "erpc_port.h"
#include "erpc_codec.h"
extern "C"
{
#include "rpc_wifi_callback.h"
// import callbacks declaration from other groups
#include "rpc_system.h"
#include "rpc_ble_api.h"
#include "rpc_ble_callback.h"
#include "rpc_wifi_api.h"
}

#if 10704 != ERPC_VERSION_NUMBER
#error "The generated shim code version is different to the rest of eRPC code."
#endif

using namespace erpc;
using namespace std;

extern ClientManager *g_client;

//! @brief Function to write struct binary_t
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data);


// Write struct binary_t function implementation
static void write_binary_t_struct(erpc::Codec * codec, const binary_t * data)
{
    codec->writeBinary(data->dataLength, data->data);
}



// rpc_wifi_callback interface rpc_wifi_event_callback function client shim.
void rpc_wifi_event_callback(const binary_t * event)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = g_client->createRequest(true);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kOnewayMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_wifi_event_callback_id, request.getSequence());

        write_binary_t_struct(codec, event);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_wifi_event_callback_id);

    return;
}

// rpc_wifi_callback interface rpc_wifi_dns_found function client shim.
void rpc_wifi_dns_found(const char * hostname, const binary_t * ipaddr, const binary_t * arg)
{
    erpc_status_t err = kErpcStatus_Success;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_wifi_dns_found_id, request.getSequence());

        codec->writeString(strlen(hostname), hostname);

        write_binary_t_struct(codec, ipaddr);

        if (arg == NULL)
        {
            codec->writeNullFlag(true);
        }
        else
        {
            codec->writeNullFlag(false);
            write_binary_t_struct(codec, arg);
        }

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_wifi_dns_found_id);

    return;
}

// rpc_wifi_callback interface rpc_tcpip_api_call_fn function client shim.
int32_t rpc_tcpip_api_call_fn(uint32_t func, const binary_t * call)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcpip_api_call_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, call);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcpip_api_call_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_connected_fn function client shim.
int32_t rpc_tcp_connected_fn(uint32_t func, const binary_t * arg, const binary_t * tpcb, int32_t err_val)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_connected_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        write_binary_t_struct(codec, tpcb);

        codec->write(err_val);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_connected_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_recv_fn function client shim.
int32_t rpc_tcp_recv_fn(uint32_t func, const binary_t * arg, const binary_t * tpcb, const binary_t * p_data, const binary_t * p_addr, int32_t err_val)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_recv_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        write_binary_t_struct(codec, tpcb);

        write_binary_t_struct(codec, p_data);

        write_binary_t_struct(codec, p_addr);

        codec->write(err_val);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_recv_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_accept_fn function client shim.
int32_t rpc_tcp_accept_fn(uint32_t func, const binary_t * arg, const binary_t * newpcb, int32_t err_val)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_accept_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        write_binary_t_struct(codec, newpcb);

        codec->write(err_val);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_accept_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_err_fn function client shim.
int32_t rpc_tcp_err_fn(uint32_t func, const binary_t * arg, int32_t err_val)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_err_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        codec->write(err_val);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_err_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_sent_fn function client shim.
int32_t rpc_tcp_sent_fn(uint32_t func, const binary_t * arg, const binary_t * tpcb, uint16_t len)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_sent_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        write_binary_t_struct(codec, tpcb);

        codec->write(len);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_sent_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}

// rpc_wifi_callback interface rpc_tcp_poll_fn function client shim.
int32_t rpc_tcp_poll_fn(uint32_t func, const binary_t * arg, const binary_t * tpcb)
{
    erpc_status_t err = kErpcStatus_Success;

    int32_t result;

    // Get a new request.
    RequestContext request = g_client->createRequest(false);

    // Encode the request.
    Codec * codec = request.getCodec();

    if (codec == NULL)
    {
        err = kErpcStatus_MemoryError;
    }
    else
    {
        codec->startWriteMessage(kInvocationMessage, krpc_wifi_callback_service_id, krpc_wifi_callback_rpc_tcp_poll_fn_id, request.getSequence());

        codec->write(func);

        write_binary_t_struct(codec, arg);

        write_binary_t_struct(codec, tpcb);

        // Send message to server
        // Codec status is checked inside this function.
        g_client->performRequest(request);

        codec->read(&result);

        err = codec->getStatus();
    }

    // Dispose of the request.
    g_client->releaseRequest(request);

    // Invoke error handler callback function
    g_client->callErrorHandler(err, krpc_wifi_callback_rpc_tcp_poll_fn_id);

    if (err)
    {
        return -1;
    }

    return result;
}
